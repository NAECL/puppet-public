#!/bin/bash
################################################################################
# RCS_Ident_String
# $RCSfile: logOutput,v $
# $Revision: 1.3 $
# $Date: 2011/05/31 11:48:20 $
# Last Changed by $Author: common $
# $State: Exp $
################################################################################


format=""
command=""
logfile=""
USAGE="\n\n\tlogOutput is a simple utility to enable date-stamped logfile creation within cron. It takes 3 arguments:\n\n
\t-c <command>\tThe command to run\n\n
\t-l <logfile>\tThe basename of the logfile to create\n\n
\t-f <format>\tThe datestamp format to use. This format is the same as the one used by the date command, except that the % signs have to be replaced by #\n
\t\t\tThis is because cron interprets % signs, and does not pass them to running scripts\n\n
Example:\n\n
\tlogOutput -c backupDatabases -l /var/log/databasebackups.log -f #Y#m\n\n
This will create a different logfile every month\n\n"

while getopts ":hc:f:l:" nextarg  >/dev/null 2>&1
do
	case $nextarg in
		"h")	echo -e $USAGE
			exit 0
			;;
		"c")	command=${OPTARG}
			;;
		"f")	format=$(echo ${OPTARG}| sed 's/#/%/g')
			dateStamp=$(date +$format)
			;;
		"l")	logfile=${OPTARG}
			;;
		*)	echo -e "\nError: flag -${OPTARG} not supported or used without an argument"
			exit 1
			;;
	esac
done
shift_ind=$(expr $OPTIND - 1)
shift $shift_ind

if [ "${command}" = "" -o "${logfile}" = "" -o "${format}" = "" ]
then
	echo -e $USAGE
	echo "Error: command, format, and logfile must all be specified"
	exit 1
fi

exec ${command} >>  ${logfile}.${dateStamp} 2>&1
